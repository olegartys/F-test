#ifndef FISHERTABLE_H
#define FISHERTABLE_H

#include <vector>
#include <QDebug>

class FisherTable
{
public:
    FisherTable() {
            table = new std::vector<std::vector<double>>
            {
                {161.45, 199.50, 215.71, 224.58, 230.16, 233.99, 236.77, 238.88, 240.54, 241.88, 245.95},
                {18.51, 19.00, 19.16, 19.25, 19.30, 19.33, 19.35, 19.37, 19.38, 19.40, 19.43},
                {10.13, 9.55, 9.28, 9.12, 9.01, 8.94, 8.88, 8.84, 8.81, 8.78, 8.74},
                {7.71, 6.94, 6.59, 6.39, 6.26, 6.16, 6.09, 6.04, 6.00, 5.96, 5.90},
                {6.61, 5.79, 5.41, 5.19, 5.05, 4.95, 4.88, 4.82, 4.78, 4.74, 4.68},
                {5.99, 5.14, 4.76, 4.53, 4.39, 4.28, 4.21, 4.15, 4.10, 4.06, 4.00},
                {5.59, 4.74, 4.35, 4.12, 3.97, 3.87, 3.79, 3.73, 3.68, 3.63, 3.57},
                {5.32, 4.46, 4.07, 3.84, 3.69, 3.58, 3.50, 3.44, 3.39, 3.34, 3.28},
                {5.12, 4.26, 3.86, 33.63, 3.48, 3.37, 3.29, 3.23, 3.18, 3.13, 3.07},
                {4.96, 4.10, 3.71, 3.48, 3.33, 3.22, 3.14, 3.07, 3.02, 2.97, 2.91},
                {4.84, 3.98, 3.59, 3.36, 3.20, 3.09, 3.01, 2.95, 2.90, 2.86, 2.79},
                {4.75, 3.88, 3.49, 3.26, 3.11, 3.00, 2.92, 2.85, 2.80, 2.76, 2.69},
                {4.67, 3.80, 3.41, 3.18, 3.02, 2.92, 2.84, 2.77, 2.72, 2.67, 2.60},
                {4.60, 3.74, 3.34, 3.11, 2.96, 2.85, 2.77, 2.70, 2.65, 2.60, 2.53},
                {4.54, 3.68, 3.29, 3.06, 2.90, 2.79, 2.70, 2.64, 2.59, 2.55, 2.48},
                {4.49, 3.63, 3.24, 3.01, 2.85, 2.74, 2.66, 2.59, 2.54, 2.49, 2.42},
                {4.45, 3.59, 3.20, 2.96, 2.81, 2.70, 2.62, 2.55, 2.50, 2.50, 2.38}

            };
    }
    ~FisherTable() { delete table; }

    double get(int k1, int k2) const {
        if (k1 > 11) k1 = 11;
        if (k2 > 17) k2 = 17;
        return (*table)[k2-1][k1-1];
    }

    int rowCount() const { return table->size(); }
    int columnCount() const { (*table)[0].size(); }

private:
    std::vector<std::vector<double>>* table;

};

#endif // FISHERTABLE_H
